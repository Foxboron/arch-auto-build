# -*- python -*-
# ex: set filetype=python:

import json

from resolver import TriggerWithPackageNames

from buildbot.plugins import util, steps, schedulers, worker, \
                             changes, reporters

config = json.load(open("./config.json"))

c = BuildmasterConfig = {}
c['schedulers'] = []
c['builders'] = []
c['services'] = []
c['title'] = config["info"]["title"]
c['titleURL'] = config["info"]["titleURL"]
c['buildbotURL'] = config["info"]["buildbotURL"]
c['protocols'] = {'pb': {'port': 9989}}
c['www'] = {"port": 8010,
            "plugins": {"waterfall_view": {},
                        "console_view": {}}}
c['db'] = {
    'db_url': "sqlite:///state.sqlite",
}
c['workers'] = [worker.LocalWorker(bot) for bot in config["localworkers"]]


# PKGBUILD Builder


def change_source():
    """Generate git poller for all repositories"""
    ret = []
    for k, v in config["sources"].items():
        ret.append(changes.GitPoller(
            v["repository"],
            project=k,
            workdir=k,
            branch="master",
            pollinterval=30,
        ))
    return ret

c['change_source'] = change_source()


all_repositories = {v["repository"]: k for k, v in config["sources"].items()}


def codebaseGenerator(chdict):
    """Steps needs to know where changes came from"""
    return all_repositories[chdict['repository']]

c['codebaseGenerator'] = codebaseGenerator

c['schedulers'].append(schedulers.SingleBranchScheduler(
    name="all",
    treeStableTimer=None,
    codebases=config["sources"],
    change_filter=util.ChangeFilter(
        project=[k for k in config["sources"].keys()],
        branch='master'),
    builderNames=["resolve"]))


def generate_codebases():
    """Generate codebase classes for ForceScheduler"""
    ret = []
    for k, v in config["sources"].items():
        ret.append(util.CodebaseParameter(
            k,
            name=k,
            branch=util.FixedParameter(name="branch", default=v["branch"]),
            revision=util.FixedParameter(name="revision", default=""),
            repository=util.FixedParameter(name="repository",
                                           default=v["repository"]),
            project=util.FixedParameter(name="project", default=k),
            ))
    return ret

sch = schedulers.ForceScheduler(
    name="force",
    buttonName="Build package",
    label="Build package",
    builderNames=["resolve"],
    codebases=generate_codebases(),
    properties=[
        util.StringParameter(name="build_package",
                             label="Package:", default="",
                             required=False, size=80),
        util.StringParameter(name="build_with_dependency",
                             label="Build package with dependency:",
                             default="",
                             required=False, size=80),
        util.ChoiceStringParameter(name="repo",
                                   label="Repository: ",
                                   choices=[i for i in config["repositories"]],
                                   default=config["default_repository"]),
        util.BooleanParameter(name="build_all_packages",
                              label="Build all packages",
                              default=False)]
)


c['schedulers'].append(sch)
c['schedulers'].append(schedulers.Triggerable(
    name="build",
    builderNames=["build"]))


def git_clone_all_sources():
    """Generates the factory cloning all repos and merging them together"""
    bf = util.BuildFactory()
    bf.addStep(steps.ShellCommand(name="clean build dir",
                                  command=["rm", "-rf", "build"],
                                  workdir="./",
                                  haltOnFailure=True))
    for k, v in config["sources"].items():
        bf.addStep(steps.Git(name="clone {}".format(v["repository"]),
                             repourl=v["repository"],
                             workdir="./{}".format(k),
                             mode='incremental',
                             haltOnFailure=True,
                             codebase=k))
        bf.addStep(steps.ShellCommand(name="merge {} into build dir".format(k),
                                      command=["rsync", "-av", "--exclude=\".*\"", "{}/".format(k), "build/"],
                                      workdir="./",
                                      haltOnFailure=True))
    return bf

# Resolver
resolve = git_clone_all_sources()
resolve.addStep(TriggerWithPackageNames(name="dependency resolver",
                                        schedulerNames=['build'],
                                        waitForFinish=True,
                                        updateSourceStamp=True))

c['builders'].append(
    util.BuilderConfig(name="resolve",
                       collapseRequests=False,
                       workernames=[bot for bot in config["localworkers"]],
                       factory=resolve))

# Builder
# Responsible of building the packages


@util.renderer
def makeCommand(props):
    """Generate the """
    options = {}
    options["pkg"] = props.getProperty('package')
    options["repo"] = props.getProperty('repo')

    build = "build-package {repo} {pkg}".format(**options)
    return build.split(' ')

build = git_clone_all_sources()
build.addStep(steps.ShellCommand(command=makeCommand, haltOnFailure=True))


c['builders'].append(
    util.BuilderConfig(name="build",
                       collapseRequests=False,
                       canStartBuild=util.enforceChosenWorker,
                       workernames=[bot for bot in config["localworkers"]],
                       factory=build,
                       properties={"repo": config["default_repository"]}))


# Docker builder


c['schedulers'].append(
    schedulers.Nightly(name='nightly',
                       branch='master',
                       builderNames=['docker-aur-build-image',
                                     'docker-build-image'],
                       change_filter=util.ChangeFilter(
                           project='arch-auto-build',
                           branch='master'),
                       hour=3, minute=0))


c['schedulers'].append(schedulers.ForceScheduler(
    name="force-docker",
    buttonName="Build docker image",
    label="Build docker image",
    builderNames=["docker-aur-build-image", "docker-build-image"],
    codebases=[""]))


docker_aur_build_image = util.BuildFactory()
docker_aur_build_image.addStep(steps.Git(
    repourl='git://github.com/Foxboron/arch-auto-build.git',
    mode='incremental',
    haltOnFailure=True))
docker_aur_build_image.addStep(steps.ShellCommand(
    command=["./build-docker.sh", config["default_repository"]],
    workdir="build/docker"))

c['builders'].append(
    util.BuilderConfig(name="docker-aur-build-image",
                       workernames=[bot for bot in config["localworkers"]],
                       factory=docker_aur_build_image))


docker_build_image = util.BuildFactory()
docker_build_image.addStep(steps.Git(
    repourl='git://github.com/Foxboron/arch-auto-build.git',
    mode='incremental',
    haltOnFailure=True))
docker_build_image.addStep(steps.ShellCommand(
    command=["./build-docker.sh"],
    workdir="build/docker.v2"))

c['builders'].append(
    util.BuilderConfig(name="docker-build-image",
                       workernames=[bot for bot in config["localworkers"]],
                       factory=docker_build_image))


# Misc
if config["irc"]:
    irc = reporters.IRC(host=config["irc"]["server"],
                        port=config["irc"]["port"],
                        useSSL=config["irc"]["ssl"],
                        nick=config["irc"]["nick"],
                        notify_events={
                            'finished': 1,
                            'started': 1,
                        },
                        channels=[{"channel": v for v in config["irc"]["channels"]}])
    c["services"].append(irc)


if config["auth"]:
    c['www']['auth'] = util.UserPasswordAuth(config["auth"])
    c['www']['authz'] = util.Authz(
        allowRules=[
            util.StopBuildEndpointMatcher(role="admin"),
            util.RebuildBuildEndpointMatcher(role="admin"),
            util.ForceBuildEndpointMatcher(role="admin"),
            util.EnableSchedulerEndpointMatcher(role="admin"),
            util.AnyControlEndpointMatcher(role="admin"),
        ],
        roleMatchers=[
            util.RolesFromEmails(admin=["admin"])
        ]
    )

